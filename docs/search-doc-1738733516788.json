[{"title":"The Packages","type":0,"sectionRef":"#","url":"/electrode/docs/quick-start/the-packages","content":"","keywords":""},{"title":"Dependencies​","type":1,"pageTitle":"The Packages","url":"/electrode/docs/quick-start/the-packages#dependencies","content":"Package\tDescription@xarc/app\tElectrode X node.js runtime support @xarc/fastify-server\tA node.js server based on Fastify @xarc/react\treact.js support @xarc/react-query\treact query support @xarc/react-redux\treact redux support @xarc/react-router\treact router support "},{"title":"Dev Dependencies​","type":1,"pageTitle":"The Packages","url":"/electrode/docs/quick-start/the-packages#dev-dependencies","content":"Package\tDescription@xarc/app-dev\tElectrode X development only support @xarc/opt-postcss\tstyle files and css module support @xarc/opt-stylus\tstylus support @xarc/opt-sass\tsass support @xarc/opt-less\tless support @xarc/opt-jest\tjest support @xarc/opt-karma\tkarma support @xarc/opt-mocha\tmocha support "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/electrode/docs/getting-started","content":"","keywords":""},{"title":"Web Applications with node.js and React​","type":1,"pageTitle":"Getting Started","url":"/electrode/docs/getting-started#web-applications-with-nodejs-and-react","content":"[!NOTE]We maintain additional code and documentations for internal Walmart systems. If you are a Walmart developer, please check internal docs to get started. Welcome! This is the documentation for building web application using Electrode X for node.js and React. In this quick start guide, we will show you how to create and run your first app. "},{"title":"Requirements​","type":1,"pageTitle":"Getting Started","url":"/electrode/docs/getting-started#requirements","content":"Install node.js version 12.x.x or later For Unix or Windows, we recommend a universal node version manager tool for managing node.js installations.If you are using Unix only, then the Unix only nvm tool is a good option. "},{"title":"Creating Your First App​","type":1,"pageTitle":"Getting Started","url":"/electrode/docs/getting-started#creating-your-first-app","content":"Note: our packages are published under the npm scope @xarc To create your first Electrode X app: npx @xarc/create-app my-app  Wait for this to complete. The console will display the following with some instructions: Created react/node webapp in directory 'my-app'. To start development, please run:  Follow the instructions outlined in the console.When complete, open your browser to http://localhost:3000To stop the DEV server, press Q Your new electrode app will appear as shown below.  "},{"title":"License​","type":1,"pageTitle":"Getting Started","url":"/electrode/docs/getting-started#license","content":"Copyright (c) 2016-present, Walmart Licensed under the Apache License, Version 2.0 "},{"title":"The Application","type":0,"sectionRef":"#","url":"/electrode/docs/quick-start/the-application","content":"","keywords":""},{"title":"The Files and Directories​","type":1,"pageTitle":"The Application","url":"/electrode/docs/quick-start/the-application#the-files-and-directories","content":"Your app consists of these essential top level directories and files: Files and Dirs\tDescriptionpackage.json\tnode.js/npm package.json xrun-tasks.ts\tThe file that loads Electrode X's development tasks for xrun task runner tsconfig.json\tTypescript config babel.config.js\tBabel config .browserslitsrc\tconfiguration for browserslist static\tstatic web assets src\tDirectory for your app's source code "},{"title":"The src Directory​","type":1,"pageTitle":"The Application","url":"/electrode/docs/quick-start/the-application#the-src-directory","content":"The src directory is where your app's code is. The sample app we created for you contains these files: src ├── app.tsx ├── demo1 │ └── index.tsx ├── demo2 │ ├── index.tsx │ └── reducers.ts ├── demo3 │ ├── index.tsx │ └── react-query-fetch.ts ├── home │ ├── index.tsx │ ├── message.ts │ └── static-props.tsx ├── import-assets.d.ts ├── info.ts ├── server │ ├── config.ts │ ├── index.ts │ └── routes.ts └── styles ├── demo1.mod.css └── demo1.mod.styl  Everything under src/server are source for your app's node.js server. There are four SubApps defined in the sample app: SubApp name\tLocationDemo1\tsrc/demo1 Demo2\tsrc/demo2 Demo3\tsrc/demo3 home\tsrc/home "},{"title":"Creating a SubApp​","type":1,"pageTitle":"The Application","url":"/electrode/docs/quick-start/the-application#creating-a-subapp","content":"A SubApp is just a React Component that can incorporate extra features Electrode X offer, and will be dynamically imported. You can render a page with multiple SubApps on it, each with its own independent behaviors, such as enabling SSR, or using different data models. To create a SubApp: First create your .tsx file, say &quot;hello.tsx&quot;, and export a subapp that's a ReactSubApp type: import { React, ReactSubApp } from &quot;@xarc/react&quot;; const Hello = () =&gt; &lt;div&gt;Hello, World&lt;/div&gt;; export const subapp: ReactSubApp = { Component: Hello };  Next declare your SubApp in another file, say &quot;app.tsx&quot;, and use the declareSubApp API and dynamic import your subapp. import { declareSubApp } from &quot;@xarc/react&quot;; export const Hello = declareSubApp({ name: &quot;Hello&quot;, getModule: () =&gt; import(&quot;./hello&quot;) });  "},{"title":"Rendering A SubApp​","type":1,"pageTitle":"The Application","url":"/electrode/docs/quick-start/the-application#rendering-a-subapp","content":"After you create a SubApp, you can render it on a page on the node.js server using the PageRenderer class API, and then send the result back to the browser. For example, in src/server/routes.ts, declare a fastify plugin to register a route that render the page with the Hello SubApp on it. import { Hello } from &quot;../app&quot;; import { PageRenderer } from &quot;@xarc/react&quot;; import { ElectrodeFastifyInstance } from &quot;@xarc/fastify-server&quot;; export async function fastifyPlugin(server: ElectrodeFastifyInstance) { const helloRenderer: PageRenderer = new PageRenderer({ pageTitle: &quot;Hello&quot;, subApps: [{ name: Hello.name, ssr: true }] }); server.route({ method: &quot;GET&quot;, url: &quot;/hello&quot;, async handler(request, reply) { const context = await helloRenderer.render({ request }); reply.type(&quot;text/html&quot;); reply.send(context.result); } }); }  "}]